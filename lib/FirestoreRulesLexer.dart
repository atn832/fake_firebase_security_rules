// Generated from FirestoreRules.g4 by ANTLR 4.11.1
// ignore_for_file: unused_import, unused_local_variable, prefer_single_quotes
import 'package:antlr4/antlr4.dart';


class FirestoreRulesLexer extends Lexer {
  static final checkVersion = () => RuntimeMetaData.checkVersion('4.11.1', RuntimeMetaData.VERSION);

  static final List<DFA> _decisionToDFA = List.generate(
        _ATN.numberOfDecisions, (i) => DFA(_ATN.getDecisionState(i), i));
  static final PredictionContextCache _sharedContextCache = PredictionContextCache();
  static const int
    TOKEN_T__0 = 1, TOKEN_T__1 = 2, TOKEN_T__2 = 3, TOKEN_T__3 = 4, TOKEN_T__4 = 5, 
    TOKEN_T__5 = 6, TOKEN_T__6 = 7, TOKEN_T__7 = 8, TOKEN_T__8 = 9, TOKEN_T__9 = 10, 
    TOKEN_T__10 = 11, TOKEN_T__11 = 12, TOKEN_ACCESS = 13, TOKEN_NAME = 14, 
    TOKEN_STRING = 15, TOKEN_CES_EXPRESSION = 16, TOKEN_WHITESPACE = 17, 
    TOKEN_COMMENT = 18;
  @override
  final List<String> channelNames = [
    'DEFAULT_TOKEN_CHANNEL', 'HIDDEN'
  ];

  @override
  final List<String> modeNames = [
    'DEFAULT_MODE'
  ];

  @override
  final List<String> ruleNames = [
    'T__0', 'T__1', 'T__2', 'T__3', 'T__4', 'T__5', 'T__6', 'T__7', 'T__8', 
    'T__9', 'T__10', 'T__11', 'ACCESS', 'NAME', 'STRING', 'CES_EXPRESSION', 
    'WHITESPACE', 'COMMENT'
  ];

  static final List<String?> _LITERAL_NAMES = [
      null, "'rules_version'", "'='", "'service'", "'cloud.firestore'", 
      "'{'", "'}'", "'match'", "'allow'", "','", "':'", "'/'", "'=**'"
  ];
  static final List<String?> _SYMBOLIC_NAMES = [
      null, null, null, null, null, null, null, null, null, null, null, 
      null, null, "ACCESS", "NAME", "STRING", "CES_EXPRESSION", "WHITESPACE", 
      "COMMENT"
  ];
  static final Vocabulary VOCABULARY = VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

  @override
  Vocabulary get vocabulary {
    return VOCABULARY;
  }


  FirestoreRulesLexer(CharStream input) : super(input) {
    interpreter = LexerATNSimulator(_ATN, _decisionToDFA, _sharedContextCache, recog: this);
  }

  @override
  List<int> get serializedATN => _serializedATN;

  @override
  String get grammarFileName => 'FirestoreRules.g4';

  @override
  ATN getATN() { return _ATN; }

  static const List<int> _serializedATN = [
      4,0,18,168,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
      6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
      13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,0,1,0,1,0,
      1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
      2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
      1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
      7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
      1,12,1,12,1,12,1,12,1,12,3,12,113,8,12,1,13,4,13,116,8,13,11,13,12,
      13,117,1,14,1,14,5,14,122,8,14,10,14,12,14,125,9,14,1,14,1,14,1,15,
      1,15,1,15,1,15,4,15,133,8,15,11,15,12,15,134,1,15,1,15,1,15,1,15,1,
      15,1,15,1,15,1,15,1,15,3,15,146,8,15,1,15,3,15,149,8,15,1,16,4,16,
      152,8,16,11,16,12,16,153,1,16,1,16,1,17,1,17,1,17,1,17,5,17,162,8,
      17,10,17,12,17,165,9,17,1,17,1,17,1,123,0,18,1,1,3,2,5,3,7,4,9,5,11,
      6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
      18,1,0,3,2,0,48,57,97,122,1,0,10,10,3,0,9,10,13,13,32,32,175,0,1,1,
      0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
      0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
      23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
      1,0,0,0,0,35,1,0,0,0,1,37,1,0,0,0,3,51,1,0,0,0,5,53,1,0,0,0,7,61,1,
      0,0,0,9,77,1,0,0,0,11,79,1,0,0,0,13,81,1,0,0,0,15,87,1,0,0,0,17,93,
      1,0,0,0,19,95,1,0,0,0,21,97,1,0,0,0,23,99,1,0,0,0,25,112,1,0,0,0,27,
      115,1,0,0,0,29,119,1,0,0,0,31,148,1,0,0,0,33,151,1,0,0,0,35,157,1,
      0,0,0,37,38,5,114,0,0,38,39,5,117,0,0,39,40,5,108,0,0,40,41,5,101,
      0,0,41,42,5,115,0,0,42,43,5,95,0,0,43,44,5,118,0,0,44,45,5,101,0,0,
      45,46,5,114,0,0,46,47,5,115,0,0,47,48,5,105,0,0,48,49,5,111,0,0,49,
      50,5,110,0,0,50,2,1,0,0,0,51,52,5,61,0,0,52,4,1,0,0,0,53,54,5,115,
      0,0,54,55,5,101,0,0,55,56,5,114,0,0,56,57,5,118,0,0,57,58,5,105,0,
      0,58,59,5,99,0,0,59,60,5,101,0,0,60,6,1,0,0,0,61,62,5,99,0,0,62,63,
      5,108,0,0,63,64,5,111,0,0,64,65,5,117,0,0,65,66,5,100,0,0,66,67,5,
      46,0,0,67,68,5,102,0,0,68,69,5,105,0,0,69,70,5,114,0,0,70,71,5,101,
      0,0,71,72,5,115,0,0,72,73,5,116,0,0,73,74,5,111,0,0,74,75,5,114,0,
      0,75,76,5,101,0,0,76,8,1,0,0,0,77,78,5,123,0,0,78,10,1,0,0,0,79,80,
      5,125,0,0,80,12,1,0,0,0,81,82,5,109,0,0,82,83,5,97,0,0,83,84,5,116,
      0,0,84,85,5,99,0,0,85,86,5,104,0,0,86,14,1,0,0,0,87,88,5,97,0,0,88,
      89,5,108,0,0,89,90,5,108,0,0,90,91,5,111,0,0,91,92,5,119,0,0,92,16,
      1,0,0,0,93,94,5,44,0,0,94,18,1,0,0,0,95,96,5,58,0,0,96,20,1,0,0,0,
      97,98,5,47,0,0,98,22,1,0,0,0,99,100,5,61,0,0,100,101,5,42,0,0,101,
      102,5,42,0,0,102,24,1,0,0,0,103,104,5,114,0,0,104,105,5,101,0,0,105,
      106,5,97,0,0,106,113,5,100,0,0,107,108,5,119,0,0,108,109,5,114,0,0,
      109,110,5,105,0,0,110,111,5,116,0,0,111,113,5,101,0,0,112,103,1,0,
      0,0,112,107,1,0,0,0,113,26,1,0,0,0,114,116,7,0,0,0,115,114,1,0,0,0,
      116,117,1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,28,1,0,0,0,119,
      123,5,39,0,0,120,122,9,0,0,0,121,120,1,0,0,0,122,125,1,0,0,0,123,124,
      1,0,0,0,123,121,1,0,0,0,124,126,1,0,0,0,125,123,1,0,0,0,126,127,5,
      39,0,0,127,30,1,0,0,0,128,129,5,105,0,0,129,130,5,102,0,0,130,132,
      1,0,0,0,131,133,8,1,0,0,132,131,1,0,0,0,133,134,1,0,0,0,134,132,1,
      0,0,0,134,135,1,0,0,0,135,149,1,0,0,0,136,137,5,116,0,0,137,138,5,
      114,0,0,138,139,5,117,0,0,139,146,5,101,0,0,140,141,5,102,0,0,141,
      142,5,97,0,0,142,143,5,108,0,0,143,144,5,115,0,0,144,146,5,101,0,0,
      145,136,1,0,0,0,145,140,1,0,0,0,146,147,1,0,0,0,147,149,5,59,0,0,148,
      128,1,0,0,0,148,145,1,0,0,0,149,32,1,0,0,0,150,152,7,2,0,0,151,150,
      1,0,0,0,152,153,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,155,1,
      0,0,0,155,156,6,16,0,0,156,34,1,0,0,0,157,158,5,47,0,0,158,159,5,47,
      0,0,159,163,1,0,0,0,160,162,8,1,0,0,161,160,1,0,0,0,162,165,1,0,0,
      0,163,161,1,0,0,0,163,164,1,0,0,0,164,166,1,0,0,0,165,163,1,0,0,0,
      166,167,6,17,0,0,167,36,1,0,0,0,9,0,112,117,123,134,145,148,153,163,
      1,6,0,0
  ];

  static final ATN _ATN =
      ATNDeserializer().deserialize(_serializedATN);
}